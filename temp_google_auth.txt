// Replace your handleGoogleSignIn function with this:

const handleGoogleSignIn = async () => {
  try {
    setIsLoading(true);
    console.log('🔵 Starting Google sign-in...');
    console.log('🔵 Platform:', Platform.OS);
    
    // Create proper redirect URI for the platform
    const redirectUri = AuthSession.makeRedirectUri({
      scheme: "mygallery",
      path: "/auth/callback",
    });
    
    console.log('🔵 Redirect URI:', redirectUri);
    
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: "google",
      options: {
        redirectTo: redirectUri,
        skipBrowserRedirect: true, // Important for mobile
      },
    });
    
    if (error) {
      console.error('🔴 Supabase OAuth error:', error);
      throw error;
    }
    
    console.log('🔵 Opening OAuth URL:', data.url);
    
    const result = await WebBrowser.openAuthSessionAsync(
      data.url,
      redirectUri
    );
    
    console.log('🔵 Auth result:', result);
    
    if (result.type === "success") {
      const url = result.url;
      console.log('🔵 Success URL:', url);
      
      // Exchange the code for a session
      const { data: sessionData, error: sessionError } =
        await supabase.auth.exchangeCodeForSession(url);
        
      if (sessionError) {
        console.error('🔴 Session error:', sessionError);
        throw sessionError;
      } else {
        console.log('✅ Logged in:', sessionData.session?.user?.email);
        Alert.alert('🎉 Success!', 'Logged in with Google successfully!');
      }
    } else if (result.type === 'cancel') {
      console.log('❌ User cancelled Google auth');
      return;
    }
    
  } catch (error: any) {
    console.error('🔴 Google Sign-In Error:', error);
    Alert.alert(
      'Authentication Error',
      `Failed to sign in with Google: ${error.message || 'Unknown error'}`,
      [{ text: 'OK' }]
    );
  } finally {
    setIsLoading(false);
  }
};